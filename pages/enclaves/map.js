// pages/enclaves/map.js
import Head from 'next/head'
import { useState, useRef, useEffect } from 'react'
import { Viewer } from '../../components/Viewer'  // –Ω–∞—à –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç

// –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∫–ª–∞–≤–æ–≤ (–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ —Å–∏—Å—Ç–µ–º–µ 1000√ó1000 px)
const enclaves = [
  {
    id: 'TZ-SPB-DOMISTINY',
    name: '–î–æ–º –ò—Å—Ç–∏–Ω—ã',
    coords: { x: 540, y: 470 },
    color: '#f43f5e',
    description: '–ñ–∏–ª–æ–π –∞–Ω–∫–ª–∞–≤ –≤ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–µ',
    curatorZid: 'ZID-0001',
    temp: '+17 ¬∞C'
  },
  {
    id: 'TZ-BY-BRST-ULY-002',
    name: '–°–≤–µ—Ç–ª—ã–π –£–ª–µ–π',
    coords: { x: 555, y: 480 },
    color: '#10b981',
    description: '–ê–≥—Ä–∞—Ä–Ω–æ-–∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –¥–æ–º –≤ –ë—Ä–µ—Å—Ç—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏',
    curatorZid: 'ZID-0002',
    temp: '+19 ¬∞C'
  }
]

export default function EnclaveMap() {
  const viewerRef = useRef(null)
  const [active, setActive] = useState(null)

  // –ü–æ—Å–ª–µ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ ‚Äî –¥–µ–ª–∞–µ–º Fit-to-Viewer
  useEffect(() => {
    // –º–µ—Ç–æ–¥ fitToViewer() –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —Ä–µ–Ω–¥–µ—Ä–∞ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
    if (viewerRef.current) {
      viewerRef.current.fitToViewer()
    }
  }, [])

  return (
    <main className="wrapper">
      <Head>
        <title>üß≠ –ö–∞—Ä—Ç–∞ –∞–Ω–∫–ª–∞–≤–æ–≤ | Terra Zetetica</title>
      </Head>

      <h1 style={{ textAlign: 'center', margin: '1.4rem 0' }}>
        üß≠ –ö–∞—Ä—Ç–∞ –∞–Ω–∫–ª–∞–≤–æ–≤
      </h1>

      <div style={{ width: '100%', maxWidth: 1000, margin: '0 auto' }}>
        {/** 
         * <Viewer> ‚Äî —ç—Ç–æ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç, 
         * –∫–æ—Ç–æ—Ä—ã–π –≤ –∏—Ç–æ–≥–µ —Ä–µ–Ω–¥–µ—Ä–∏—Ç <UncontrolledReactSVGPanZoom>
         */}
        <Viewer
          ref={viewerRef}
          width={1000}
          height={600}
          detectAutoPan={false}
          toolbarProps={{ position: 'none' }}
          miniatureProps={{ position: 'none' }}
          background="#ffffff"
        >
          <svg width={1000} height={1000}>
            {/** 
             * –°—Ö–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞ ¬´–ø–æ–¥ –ö—É–ø–æ–ª–æ–º¬ª. 
             * –ü–æ–ª–æ–∂–∏—Ç–µ —Ñ–∞–π–ª images/terra-map-2d.webp –≤ –ø–∞–ø–∫—É public/images 
             */}
            <image
              href="/images/terra-map-2d.webp"
              x="0"
              y="0"
              width="1000"
              height="1000"
            />

            {/** –†–µ–Ω–¥–µ—Ä–∏–º –∫—Ä—É–∂–∫–∏-—Ç–æ—á–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–Ω–∫–ª–∞–≤–∞ */}
            {enclaves.map(e => (
              <g
                key={e.id}
                onClick={ev => {
                  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (SVG ‚Üí —ç–∫—Ä–∞–Ω–Ω—ã–µ),
                  // —á—Ç–æ–±—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞—Ç—å pop-up
                  const pt = ev.target.ownerSVGElement.createSVGPoint()
                  pt.x = e.coords.x
                  pt.y = e.coords.y
                  const screenPoint = pt.matrixTransform(
                    ev.target.getScreenCTM()
                  )
                  setActive({
                    ...e,
                    screen: {
                      x: screenPoint.x,
                      y: screenPoint.y
                    }
                  })
                }}
                style={{ cursor: 'pointer' }}
              >
                <circle
                  cx={e.coords.x}
                  cy={e.coords.y}
                  r="10"
                  fill={e.color}
                  stroke="#222"
                  strokeWidth="1"
                />
              </g>
            ))}
          </svg>
        </Viewer>
      </div>

      {/** –ü–æ–ø-–∞–ø —Å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç—è–º–∏ –æ–± –∞–∫—Ç–∏–≤–Ω–æ–º –∞–Ω–∫–ª–∞–≤–µ */}
      {active && (
        <div
          style={{
            position: 'fixed',
            top: active.screen.y + 12,
            left: active.screen.x + 12,
            maxWidth: 260,
            background: '#fff',
            border: '1px solid #ccc',
            borderRadius: 6,
            padding: '0.9rem',
            boxShadow: '0 4px 12px rgba(0,0,0,0.15)',
            zIndex: 100
          }}
        >
          <strong style={{ fontSize: 16 }}>{active.name}</strong>
          <div style={{ fontSize: 13, margin: '.35rem 0' }}>
            {active.description}
          </div>
          <div style={{ fontSize: 13 }}>
            üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: <b>{active.temp}</b>
          </div>
          <div style={{ fontSize: 12, color: '#666' }}>
            üÜî {active.id}
          </div>

          <div
            style={{
              marginTop: '.8rem',
              display: 'flex',
              gap: '.5rem',
              alignItems: 'center'
            }}
          >
            <a
              href={`/enclaves/${active.id}`}
              className="btn primary"
              style={{ padding: '.35rem .8rem', fontSize: 13 }}
            >
              –ü–æ–¥—Ä–æ–±–Ω–µ–µ ‚Üí
            </a>
            <button
              onClick={() => setActive(null)}
              style={{
                marginLeft: 'auto',
                fontSize: 18,
                background: 'none',
                border: 'none',
                cursor: 'pointer',
                lineHeight: 1
              }}
            >
              ‚úñ
            </button>
          </div>
        </div>
      )}

      <p
        style={{
          textAlign: 'center',
          fontSize: 14,
          marginTop: 18,
          color: '#555'
        }}
      >
        üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —É—Å–ª–æ–≤–Ω—ã. –ö–∞—Ä—Ç–∞ ‚Äî —Å—Ö–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–µ–∫—Ü–∏—è –ø–æ–¥ –ö—É–ø–æ–ª–æ–º.
      </p>

      <div style={{ textAlign: 'center', marginTop: 24 }}>
        <a href="/enclaves" className="btn primary">
          ‚Üê –ù–∞–∑–∞–¥ –∫ –∞–Ω–∫–ª–∞–≤–∞–º
        </a>
      </div>
    </main>
  )
}
