// pages/challenge3.js  ‚Ä¢ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω –≤—ã–≤–æ–¥ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ + –Ω–∞–≤–∏–≥–∞—Ü–∏—è
//--------------------------------------------------------------
import { useEffect, useState } from 'react';
import Link           from 'next/link';
import DayMaterial    from '../components/DayMaterial';
import sbRest         from '../utils/sbRest';
import { parse }      from 'cookie';

const ONE_DAY  = 86_400_000;
const QUEUE    = 'tz_queue_v1';
const SB_URL   = process.env.NEXT_PUBLIC_SUPABASE_URL;
const SB_KEY   = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;
const isBrw    = typeof window !== 'undefined';

/* ‚îÄ‚îÄ‚îÄ –ª—ë–≥–∫–∏–µ –ø–æ–ª–∏—Ñ–∏–ª–ª—ã (—Å—Ç–∞—Ä—ã–º WebView) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
if (isBrw) {
  if (!('Promise' in window))        await import('es6-promise/auto');
  if (!Array.from)                   Array.from = obj => [].slice.call(obj);
}

/* ‚îÄ‚îÄ‚îÄ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π upsert (SSR=fetch, CSR=XHR) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
async function upsert(row) {
  if (row.note !== undefined) { row.notes = row.note; delete row.note; }

  // ‚ûü —Å–µ—Ä–≤–µ—Ä
  if (!isBrw) {
    const { createClient } = await import('@supabase/supabase-js');
    const sb = createClient(SB_URL, SB_KEY, { global:{ headers:{ apikey:SB_KEY }}});
    return !(await sb.from('daily_progress')
                     .upsert(row,{ onConflict:'citizen_id,day_no' })).error;
  }
  // ‚ûü —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä
  if ('fetch' in window) {
    const r = await fetch(
      `${SB_URL}/rest/v1/daily_progress?on_conflict=citizen_id,day_no`, {
        method :'POST',
        headers:{
          apikey        : SB_KEY,
          authorization : `Bearer ${SB_KEY}`,
          'Content-Type': 'application/json',
          Prefer        : 'return=minimal,resolution=merge-duplicates'
        },
        body: JSON.stringify(row)
      });
    return r.ok;
  }
  // ‚ûü –¥—Ä–µ–≤–Ω–∏–π WebView
  return sbRest.upsert('daily_progress', row, 'citizen_id,day_no');
}

/* ‚îÄ‚îÄ‚îÄ React-—Å—Ç—Ä–∞–Ω–∏—Ü–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
export default function Challenge({ day, material, canSkip, cid }) {

  const [note,     setNote] = useState('');
  const [nState,   setNS  ] = useState('idle');     // idle|saving|saved|error
  const [dState,   setDS  ] = useState('idle');     // idle|saving|saved|queued|error
  const [left,     setLft ] = useState(canSkip ? 0 : ONE_DAY);

  /* mount */
  useEffect(()=>{
    if (isBrw) setNote(localStorage.getItem(`tz_note_${day}`) || '');

    if (canSkip) return setLft(0);

    const started = isBrw
      ? +localStorage.getItem('tz_started') || Date.now()
      : Date.now();
    const next = started + ONE_DAY;
    setLft(Math.max(0, next - Date.now()));

    const id = setInterval(() =>
      setLft(l => Math.max(0, l - 1000)), 1000);
    return () => clearInterval(id);
  }, [day, canSkip]);

  /* offline-–æ—á–µ—Ä–µ–¥—å */
  useEffect(()=>{
    const flush = async () => {
      const q = JSON.parse(localStorage.getItem(QUEUE) || '[]');
      if (!q.length) return;
      const rest=[];
      for (const r of q) if (!(await upsert(r))) rest.push(r);
      localStorage.setItem(QUEUE, JSON.stringify(rest));
      if (!rest.length && dState==='queued') setDS('saved');
    };
    if (isBrw) {
      flush();
      addEventListener('online',        flush);
      addEventListener('visibilitychange', flush);
      return () => {
        removeEventListener('online',        flush);
        removeEventListener('visibilitychange', flush);
      };
    }
  }, [dState]);

  /* handlers */
  const saveNote = async () => {
    if (nState==='saving') return;
    setNS('saving');
    const ok = await upsert({ citizen_id:+cid, day_no:day, note });
    setNS(ok ? 'saved' : 'error');
    if (ok && isBrw) localStorage.removeItem(`tz_note_${day}`);
  };

  const saveDone = async () => {
    if (dState==='saving') return;
    setDS('saving');
    const row = { citizen_id:+cid, day_no:day,
                  watched_at:new Date().toISOString(), note };
    const ok  = await upsert(row);
    if (ok) {
      setDS('saved');
      if (isBrw && !localStorage.getItem('tz_started'))
        localStorage.setItem('tz_started', Date.now());
    } else if (isBrw) {
      const q = JSON.parse(localStorage.getItem(QUEUE)||'[]');
      q.push(row); localStorage.setItem(QUEUE, JSON.stringify(q));
      setDS('queued');
    } else setDS('error');
  };

  /* view */
  const h=Math.floor(left/3.6e6),
        m=Math.floor(left/6e4)%60,
        s=Math.floor(left/1e3)%60;

  return (
    <main style={{maxWidth:820,margin:'0 auto',padding:24,fontFamily:'system-ui'}}>
      <h1>–î–µ–Ω—å {day}</h1>

      {/* ---- –ö–û–ù–¢–ï–ù–¢ –î–ù–Ø ---- */}
      {material
        ? <DayMaterial material={material}/>   {/* ‚Üê —Ñ–∏–∫—Å: prop = material */}
        : <p><em>–ù–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞</em></p>}

      <textarea rows={4} style={{width:'100%',marginTop:16}}
        value={note}
        onChange={e=>{
          setNote(e.target.value);
          if (isBrw) localStorage.setItem(`tz_note_${day}`,e.target.value);
        }}/>

      <div style={{display:'flex',gap:12,alignItems:'center',marginTop:12}}>
        <button disabled={nState==='saving'}
                onClick={saveNote}
                onTouchEnd={e=>{e.preventDefault();saveNote();}}>
          üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–º–µ—Ç–∫—É
        </button>
        {nState==='saving' && '–°–æ—Ö—Ä–∞–Ω—è—é‚Ä¶'}
        {nState==='saved'  && '–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ‚úì'}
        {nState==='error'  && '–û—à–∏–±–∫–∞ √ó'}
      </div>

      <div style={{display:'flex',gap:12,alignItems:'center',marginTop:16}}>
        <button disabled={dState==='saving'}
                style={{fontSize:18}}
                onClick={saveDone}
                onTouchEnd={e=>{e.preventDefault();saveDone();}}>
          ‚úÖ –Ø –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ –∏–∑—É—á–∏–ª
        </button>
        {dState==='saved'  && '‚úì'}
        {dState==='queued' && '–í –æ—á–µ—Ä–µ–¥–∏ ‚úì'}
        {dState==='saving' && '–°–æ—Ö—Ä–∞–Ω—è—é‚Ä¶'}
        {dState==='error'  && '–û—à–∏–±–∫–∞ √ó'}
      </div>

      {!canSkip && (
        <p style={{marginTop:24,fontSize:18}}>
          –î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è: {h}—á {m}–º {s}—Å
        </p>
      )}

      {/* –Ω–∞–≤–∏–≥–∞—Ü–∏—è: —Ç–µ–ø–µ—Ä—å –≤—Å–µ–≥–¥–∞ ¬´—Å–µ—Ä–∞—è¬ª —Å—Å—ã–ª–∫–∞, –Ω–æ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–∞,
         –µ—Å–ª–∏ –º–∞—Ç–µ—Ä–∏–∞–ª –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –ø—Ä–æ–π–¥–µ–Ω */}
      <nav style={{marginTop:32,display:'flex',justifyContent:'space-between'}}>
        {day>1 &&
          <Link href={`/challenge3?day=${day-1}`}>‚óÄ –î–µ–Ω—å {day-1}</Link>}
        {day<14 &&
          <Link href={`/challenge3?day=${day+1}`}
                style={{
                  opacity: (left>0 && !canSkip && dState!=='saved') ? 0.4 : 1
                }}>
            –î–µ–Ω—å {day+1} ‚ñ∂
          </Link>}
      </nav>
    </main>
  );
}

/* ‚îÄ‚îÄ‚îÄ getInitialProps (SSR) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
Challenge.getInitialProps = async ({ req,res,query }) => {
  const day = +query.day || 1;
  const { createClient } = await import('@supabase/supabase-js');
  const sb = createClient(SB_URL, SB_KEY,{ global:{ headers:{apikey:SB_KEY}} });

  const { data:material } = await sb
    .from('daily_materials').select('*').eq('day_no',day).maybeSingle();

  let cid=null, canSkip=false;
  if (req){
    cid=parse(req.headers.cookie||'').cid||null;
    if (cid){
      const { data:c } = await sb.from('citizens')
        .select('can_skip').eq('id',cid).maybeSingle();
      canSkip=!!c?.can_skip;
    }
    res.setHeader('Cache-Control','s-maxage=300, stale-while-revalidate');
  }
  return { day, material, canSkip, cid };
};
