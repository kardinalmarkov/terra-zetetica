import { useEffect, useState } from 'react';
import Head from 'next/head';

export default function MyPath() {
  const [dailyLog, setDailyLog] = useState([]);

  const observerQuotes = [
    '¬´–¢—ã –º–æ–∂–µ—à—å –Ω–∞–±–ª—é–¥–∞—Ç—å –≤–µ—á–Ω–æ. –ù–æ —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –¥–µ–π—Å—Ç–≤—É–µ—à—å ‚Äî —Ç—ã –≤—Ö–æ–¥–∏—à—å –≤ –∏–≥—Ä—É.¬ª',
    '¬´–ù–µ–≤—ã–±–æ—Ä ‚Äî —ç—Ç–æ —Ç–æ–∂–µ –≤—ã–±–æ—Ä. –û–Ω –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–±—è –≤ –Ω–∞—á–∞–ª–æ.¬ª',
    '¬´–¢—ã –Ω–µ –º–æ–∂–µ—à—å –ø—Ä–æ–π—Ç–∏ –≤ 4D –±–µ–∑ –í–æ–ª–∏ –∏–ª–∏ –°–µ—Ä–¥—Ü–∞. –¢–æ–ª—å–∫–æ –ø–æ–ª—è—Ä–∏–∑–∞—Ü–∏—è –≤–µ–¥—ë—Ç –∫ –ø–µ—Ä–µ—Ö–æ–¥—É.¬ª',
    '¬´–ù–∞–±–ª—é–¥–µ–Ω–∏–µ –±–µ–∑ –¥–µ–π—Å—Ç–≤–∏—è ‚Äî –µ—â—ë –Ω–µ –ü—É—Ç—å. –ü—É—Ç—å ‚Äî —ç—Ç–æ –í–æ–ª—è.¬ª',
    '¬´–¢—ã –≤–∏–¥–∏—à—å –ø–∞—Ç—Ç–µ—Ä–Ω—ã ‚Äî –Ω–æ —Ç—ã –∏—Ö –µ—â—ë –Ω–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–ª.¬ª'
  ];

  useEffect(() => {
    const saved = localStorage.getItem('insider_progress');
    if (saved) {
      const parsed = JSON.parse(saved);
      setDailyLog(parsed.dailyLog || []);
    }
  }, []);

  return (
    <>
      <Head>
        <title>–ú–æ–π –ü—É—Ç—å ‚Äî Terra Zetetica</title>
      </Head>

      <main style={{ maxWidth: 800, margin: '0 auto', padding: '2rem 1rem' }}>
        <h1>üìä –ú–æ–π –ü—É—Ç—å</h1>

        {dailyLog.length === 0 ? (
          <p>–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. –ó–∞–≤–µ—Ä—à–∞–π –¥–Ω–∏ –≤ –ø—Ä–∞–∫—Ç–∏–∫–µ, —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å –¥–∏–Ω–∞–º–∏–∫—É.</p>
        ) : (
          <>
            {/* üìä –ì—Ä–∞—Ñ–∏–∫ –¥–∏–Ω–∞–º–∏–∫–∏ */}
            <div style={{ display: 'flex', gap: '6px', margin: '2rem 0', alignItems: 'flex-end', height: '100px' }}>
              {dailyLog.map((log, i) => {
                const pos = log.checkedItems?.positive?.length || 0;
                const neg = log.checkedItems?.negative?.length || 0;
                const obs = log.checkedItems?.observer?.length || 0;
                const total = pos + neg + obs || 1;

                const posPct = (pos / total) * 100;
                const obsPct = (obs / total) * 100;
                const negPct = (neg / total) * 100;

                return (
                  <div key={i} style={{ textAlign: 'center', width: '20px' }}>
                    <div style={{
                      height: '100px',
                      display: 'flex',
                      flexDirection: 'column-reverse',
                      borderRadius: 4,
                      overflow: 'hidden'
                    }}>
                      <div style={{ height: `${negPct}%`, background: '#ef9a9a' }} />
                      <div style={{ height: `${obsPct}%`, background: '#e0e0e0' }} />
                      <div style={{ height: `${posPct}%`, background: '#a5d6a7' }} />
                    </div>
                    <div style={{ fontSize: '0.65rem', marginTop: 4 }}>{log.date.slice(5)}</div>
                  </div>
                );
              })}
            </div>


            {/* üóìÔ∏è –ò—Å—Ç–æ—Ä–∏—è –ø–æ –¥–Ω—è–º */}
            <ul style={{ listStyle: 'none', padding: 0 }}>
              {dailyLog.map((log, i) => {
                const p = log.checkedItems?.positive?.length || 0;
                const n = log.checkedItems?.negative?.length || 0;
                const o = log.checkedItems?.observer?.length || 0;

                const isObserverDay = o >= 3 && p < 3 && n < 5;

                return (
                  <li key={i} style={{ marginBottom: '2rem', padding: '1rem', border: '1px solid #ccc', borderRadius: 8 }}>
                    <h3>üìÖ {log.date}</h3>
                    <p><strong>–°–ª—É–∂–µ–Ω–∏–µ –¥—Ä—É–≥–∏–º:</strong> {p} / 5</p>
                    <p><strong>–°–ª—É–∂–µ–Ω–∏–µ —Å–µ–±–µ:</strong> {n} / 5</p>
                    <p><strong>–ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å:</strong> {o} / 5</p>

                    {log.insight && (
                      <p style={{ marginTop: '1rem' }}>
                        üí° <em>{log.insight}</em>
                      </p>
                    )}

                    {isObserverDay && (
                      <p style={{ marginTop: '0.5rem', color: '#666', fontStyle: 'italic' }}>
                        {observerQuotes[i % observerQuotes.length]}
                      </p>
                    )}
                  </li>
                );
              })}
            </ul>
          </>
        )}
      </main>
    </>
  );
}
