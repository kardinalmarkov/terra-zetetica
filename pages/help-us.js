// pages/help-us.js
import Head from 'next/head'
import { useState, useEffect } from 'react'

const allTasks = [
  // –ü—Ä–æ—Å—Ç—ã–µ (‚≠ê –¥–æ 15‚Ä≤)
  { id: 1,  text: '–†–µ–ø–æ—Å—Ç–Ω—É—Ç—å –ø–æ—Å—Ç Terra Zetetica –≤ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ',       time: 10,  complexity: 'simple', zeta: 1, checklist: [
      '–ó–∞–π—Ç–∏ –≤ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ',
      '–ù–∞–π—Ç–∏ –ø–æ—Å—Ç @terra-zetetica',
      '–ù–∞–∂–∞—Ç—å ¬´–ü–æ–¥–µ–ª–∏—Ç—å—Å—è¬ª'
    ]
  },
  { id: 2,  text: '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Ç–æ—Ä–∏—Å –æ TZ –≤ Instagram',             time: 15,  complexity: 'simple', zeta: 1, checklist: [
      '–û—Ç–∫—Ä—ã—Ç—å Instagram',
      '–ù–∞–π—Ç–∏ –Ω–∞—à—É —Å—Ç—Ä–∞–Ω–∏—Ü—É',
      '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≤ —Å—Ç–æ—Ä–∏—Å'
    ]
  },
  { id: 3,  text: '–†–∞—Å—Å—ã–ª–∫–æ–π –≤ WhatsApp –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∞–π—Ç TZ', time: 10, complexity: 'simple', zeta: 1, checklist: [
      '–û—Ç–∫—Ä—ã—Ç—å WhatsApp',
      '–í—ã–±—Ä–∞—Ç—å —á–∞—Ç',
      '–í—Å—Ç–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å'
    ]
  },
  // ‚Ä¶ (–µ—â–µ –ø—Ä–æ—Å—Ç—ã–µ –∑–∞–¥–∞–Ω–∏—è –¥–æ id 10)
  
  // –°—Ä–µ–¥–Ω–∏–µ (üåü 15‚Ä≤‚Äì60‚Ä≤)
  { id: 11, text: '–°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É TZ –≤ VK –∏ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å 20 —á–µ–ª–æ–≤–µ–∫', time: 60, complexity: 'medium', zeta: 5, checklist: [
      '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ VK',
      '–°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É ¬´Terra Zetetica¬ª',
      '–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π'
    ]
  },
  { id: 12, text: '–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –≥–ª–∞–≤–Ω—ã–π –±–ª–æ–≥-–ø–æ—Å—Ç –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫',    time: 90, complexity: 'medium', zeta: 5, checklist: [
      '–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç',
      '–ü–µ—Ä–µ–≤–µ—Å—Ç–∏',
      '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∞–≤–∫–∏ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π'
    ]
  },
  // ‚Ä¶ (–µ—â–µ —Å—Ä–µ–¥–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –¥–æ id 20)

  // –°–ª–æ–∂–Ω—ã–µ (üöÄ –±–æ–ª—å—à–µ 1 —á)
  { id: 21, text: '–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤–µ—Å—å —Å–∞–π—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π',              time: 360, complexity: 'hard', zeta: 20, checklist: [
      '–°–∫–∞—á–∞—Ç—å PO-—Ñ–∞–π–ª—ã',
      '–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ —Å—Ç—Ä–æ–∫–∏',
      '–°–æ–±—Ä–∞—Ç—å –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å'
    ]
  },
  { id: 22, text: '–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ–¥–µ–ø–ª–æ–π (GitHub Actions)',           time: 240, complexity: 'hard', zeta: 15, checklist: [
      '–°–æ–∑–¥–∞—Ç—å workflow —Ñ–∞–π–ª',
      '–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–µ–∫—Ä–µ—Ç—ã',
      '–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å'
    ]
  },
  // ‚Ä¶ (–µ—â–µ —Å–ª–æ–∂–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –¥–æ id 30)

  // –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏ –¥–æ 100 –∑–∞–¥–∞–Ω–∏–π
]

export default function HelpUs() {
  const [favorites, setFavorites] = useState([])
  const [filterMax, setFilterMax] = useState(120)
  const [currentUrl, setCurrentUrl] = useState('')

  useEffect(() => {
    if (typeof window !== 'undefined') {
      setCurrentUrl(window.location.href)
      const saved = JSON.parse(localStorage.getItem('tz-favs') || '[]')
      setFavorites(saved)
    }
  }, [])

  function toggleFav(id) {
    const next = favorites.includes(id)
      ? favorites.filter(x => x !== id)
      : [...favorites, id]
    setFavorites(next)
    if (typeof window !== 'undefined') {
      localStorage.setItem('tz-favs', JSON.stringify(next))
    }
  }

  const filtered = allTasks.filter(t => t.time <= filterMax)
  const levels = [
    { key: 'simple', title: '‚≠ê –ü—Ä–æ—Å—Ç—ã–µ (–¥–æ 15‚Ä≤)' },
    { key: 'medium', title: 'üåü –°—Ä–µ–¥–Ω–∏–µ (15‚Ä≤‚Äì60‚Ä≤)' },
    { key: 'hard',   title: 'üöÄ –°–ª–æ–∂–Ω—ã–µ (–±–æ–ª—å—à–µ 1 —á)' },
  ]

  return (
    <>
      <Head>
        <title>–í–Ω–µ—Å—Ç–∏ –≤–∫–ª–∞–¥ | Terra Zetetica</title>
      </Head>
      <main className="wrapper">
        <h1>–í–Ω–µ—Å—Ç–∏ –≤–∫–ª–∞–¥ –≤ Terra Zetetica</h1>
        <p>–û—Ç—Ñ–∏–ª—å—Ç—Ä—É–π—Ç–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –æ—Ç–º–µ—Ç—å—Ç–µ ‚≠ê –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–µ—Å—è –∑–∞–¥–∞–Ω–∏—è.</p>

        <div className="filter">
          <label>
            –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: {filterMax <= 60 ? `${filterMax}‚Ä≤` : `${Math.floor(filterMax/60)} —á`}
          </label>
          <input
            type="range"
            min={10}
            max={480}
            step={5}
            value={filterMax}
            onChange={e => setFilterMax(+e.target.value)}
          />
        </div>

        {levels.map(({ key, title }) => (
          <section key={key} className="section">
            <h2>{title}</h2>
            <div className="tasks-list">
              {filtered
                .filter(t => t.complexity === key)
                .map(t => (
                  <div key={t.id} className="task-card">
                    <div className="task-header">
                      <span className="task-id">{t.id}.</span>
                      <span className="task-text">{t.text}</span>
                      <button className="fav" onClick={() => toggleFav(t.id)}>
                        {favorites.includes(t.id) ? '‚òÖ' : '‚òÜ'}
                      </button>
                    </div>
                    <div className="task-meta">
                      <span>
                        ‚è± {t.time <= 60 ? `${t.time}‚Ä≤` : `${Math.floor(t.time/60)} —á`}
                      </span>
                      <span className="badge">+{t.zeta} ZETA</span>
                      {currentUrl && (
                        <div className="share">
                          <a
                            href={`https://t.me/share/url?url=${encodeURIComponent(currentUrl)}&text=${encodeURIComponent(t.text)}`}
                            target="_blank"
                            rel="noopener noreferrer"
                          >
                            Telegram
                          </a>
                          <a
                            href={`https://wa.me/?text=${encodeURIComponent(t.text + ' ' + currentUrl)}`}
                            target="_blank"
                            rel="noopener noreferrer"
                          >
                            WhatsApp
                          </a>
                        </div>
                      )}
                    </div>
                    <details>
                      <summary>–ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å</summary>
                      <ul>
                        {t.checklist.map((step, i) => (
                          <li key={i}>{step}</li>
                        ))}
                      </ul>
                    </details>
                  </div>
                ))}
            </div>
          </section>
        ))}

        <section className="report">
          <h2>üì¨ –û—Ç—á—ë—Ç –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–µ</h2>
          <p>–ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É: —É–∫–∞–∂–∏—Ç–µ Z-ID, –Ω–æ–º–µ—Ä–∞ –∑–∞–¥–∞—á, —Å—Å—ã–ª–∫–∏ –Ω–∞ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π.</p>
          <form
            action="https://formspree.io/f/—Ç–≤–æ–π_—Ñ–æ—Ä–º—Å–ø—Ä–∏_–∏–¥"
            method="POST"
            className="report-form"
          >
            <input name="z_id" placeholder="Z-ID (–Ω–æ–º–µ—Ä)" required />
            <input name="task_ids" placeholder="–ù–æ–º–µ—Ä–∞ –∑–∞–¥–∞—á (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)" required />
            <input name="links" placeholder="–°—Å—ã–ª–∫–∏ –Ω–∞ –º–∞—Ç–µ—Ä–∏–∞–ª—ã" required />
            <input name="file_link" placeholder="–°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–∞–π–ª—ã (Drive/Dropbox)" />
            <textarea name="comment" placeholder="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)" />
            <button type="submit">–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç</button>
          </form>
        </section>
      </main>

      <style jsx>{`
        .wrapper {
          max-width: 960px;
          margin: 0 auto;
          padding: 2rem 1rem;
        }
        .filter {
          margin: 1rem 0;
        }
        .tasks-list {
          display: grid;
          grid-template-columns: 1fr;
          gap: 1rem;
        }
        @media (min-width: 600px) {
          .tasks-list {
            grid-template-columns: 1fr 1fr;
          }
        }
        .task-card {
          background: #fff;
          border: 1px solid #ddd;
          border-radius: 4px;
          padding: 1rem;
        }
        .task-header {
          display: flex;
          align-items: center;
          gap: 0.5rem;
        }
        .fav {
          margin-left: auto;
          background: none;
          border: none;
          font-size: 1.25rem;
          cursor: pointer;
        }
        .task-meta {
          display: flex;
          justify-content: space-between;
          align-items: center;
          margin-top: 0.5rem;
          font-size: 0.9rem;
        }
        .badge {
          background: #e0f7fa;
          padding: 0.25rem 0.5rem;
          border-radius: 4px;
        }
        .share a {
          margin-left: 0.5rem;
          font-size: 0.8rem;
          text-decoration: none;
          color: #0077cc;
        }
        details {
          margin-top: 0.5rem;
        }
        summary {
          cursor: pointer;
          font-weight: bold;
        }
        .report {
          margin-top: 3rem;
          padding: 2rem;
          background: #f1f8e9;
          border-radius: 8px;
        }
        .report-form {
          display: grid;
          gap: 1rem;
          max-width: 600px;
        }
        .report-form input,
        .report-form textarea {
          padding: 0.75rem;
          border: 1px solid #ccc;
          border-radius: 4px;
          width: 100%;
        }
        .report-form button {
          width: fit-content;
          padding: 0.75rem 1.5rem;
          background: #4caf50;
          color: #fff;
          border: none;
          border-radius: 4px;
          cursor: pointer;
        }
      `}</style>
    </>
  )
}
